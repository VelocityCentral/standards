////////////////////////////////////////////////////////////////////////////////
// Program : Create an XML file of a stock take for a wareehouse that is 
// setup for consignment. 
//=========================================================================//
// Copyright (C) Velocity Global Ltd 2018
//
// PRONTO is a registered trademark of PRONTO Software P/L.
//
// All Rights Reserved. Unauthorized copying is prohibited.
//=========================================================================//
//
// File: so/constkload.spl
//
// Modification History
// Date		Who	SDR		What
// 12Apr18  rjb         written 
/*

This program is for managing stock consigned to customers.
The problem with the existing functionality is that you can end up with muliple
consignment orders and it is very difficult to get visibility of what is ACTUALLY
in a customer's consignment warehouse.

This program supports a different approach:  Create a normal warehouse that is
physically on the customer site.  Do a stocktake in the normal manner.
Stock count variances represent the stock the customer has used and should be 
invoiced.

** NEVER POST THE STOCK TAKE!!!! **  (Because this program creates a sales
order for the differences so no GL update is required).

BEFORE posting the stock take (but after the counts have been entered and confirmed)
run this program.  

It will create either an XML file (for external use or EDI import) or a csv file in m50loadso format
of all the variances in format that looks like a customer sales order ready for importing via EDI. 

It will also flag the stock take as complete.  

*/
////////////////////////////////////////////////////////////////////////////////
 
#include "../include/i8secabt.spl"
#include "../include/i8proglog.spl"
#include "../so/i50loadso.spl"
 
field
	ws-function-title						type string


procedure main
	get system-control first
	on error
		abort "No Control Record"
	endon
	do i8secabt-check-abort
		parameters are sys-consolidation-division login-id() "ZVG" "T008"
		returning ws-function-title 
	set ws-function-title = "Create Sales order from Stocktake"
	do i8proglog-write-log
	do select-stock-take
end-procedure


screen select-stock-take
local mode
	lm-select
		prompt "Create Order"
	responsive
	title ws-function-title
	select * 
		from stock-take-control
		where stc-status = "F"
		and stc-whse-from = stc-whse-to // can't do range of warehouses
		order by stc-update-batch-ref desc
	data-grid  occurs 10
	allowed search
screen-section
	title "Review"
	do view-order parameters stc-control-code no-wait
end-screen-section
detail
	if screenmode = lm-select
		do create-order-prompt entry once parameters are stc-control-code
	endif
	screen-group // ---- Datagrid ----------------------------
		accept stc-control-code col 1
			title "Code"
			when screenmode = lm-select
			show-value
		display stc-whse-from col 2
			title "Whse"
		display stc-freeze-date col 3
			title "Date"
		display stc-login-id col 4
			title "User"
	end-screen-group // ---- Datagrid --------------------------------------
end-screen

screen create-order-prompt
parameters
	lp-control-code						like stc-control-code
local
	lf-customer							like accountcode
	lf-type								pic x
	lf-filename							pic x(128) type string
	lf-post-to-pronto					type boolean
	lf-close-stock-take					type boolean
	responsive
		window-position 5
		title "Enter Customer"
	no-ok-cancel
before
	get stock-take-control
		on index stc-control-code
		key is lp-control-code
	on error
	else
		select lf-customer = min(accountcode)
			from deb-master
			where warehouse = :stc-whse-from
		end-select
	endon
detail
	screen-group // ---- Customer Select ----------------------------
		title "Customer Select"  // The title is optional
		accept lf-customer 
			title 'Customer'
			uppercase
			default lf-customer
			drop-down
				width 38
				concat-title
				select accountcode,shortname, 0 , 
							,if-then-else(deb-status = spaces,TRUE,FALSE)
					from deb-master 
					where warehouse = :stc-whse-from
			end-drop-down
		field-group // ---- Type ----------------------------
			title "Type"  // Title is optional
			radio-button lf-type
				"P" title  "Pronto Ready"
				"X" title  "XML (for external use)"
				default lf-type
				before-radio-button
					if screenmode = form-entry-defaults
						set lf-type = "P"
					endif
				end-before-radio-button
				on change
					if lf-type = "X"
						set lf-filename = str-concat("/tmp/" lf-customer "_consign_" format-picture(today(),"yymmdd") ".xml")
					else
						set lf-filename = str-concat("/tmp/consign_" stc-control-code ".csv")
					endif
					refresh lf-filename
					refresh lf-post-to-pronto
					refresh whens
				end-on
			end-radio-button 
		end-field-group // ---- Type --------------------------------------
		accept lf-filename pic x(40)
			title "Filename"
			help "This is the name of the external file"
			default lf-filename
		check-box lf-post-to-pronto 
			values True False
			title "Post to Sales Orders"
			default is lf-post-to-pronto
			when lf-type = "P"
			help "Automatically create order in Pronto"
			before-check-box
				if screenmode = form-entry-defaults
					set lf-post-to-pronto = false
				endif
			end-before-check-box
		end-check-box 
		check-box lf-close-stock-take
			values True False
			title "Close Stock Take"
			default is lf-close-stock-take
			help "Select this box to close out the stock take"
			before-check-box
				if screenmode = form-entry-defaults
					set lf-close-stock-take = False
				endif
			end-before-check-box
		end-check-box 
	end-screen-group // ---- Customer Select --------------------------------------
	confirm 
		prompt "Ok to Create Order?"
	confirmed
		if lf-type = "X"
			do create-xml-order parameters are lp-control-code lf-customer lf-filename 
		else
			do create-stdcsv-order parameters are lp-control-code lf-customer lf-filename lf-post-to-pronto
		endif
	//
		if lf-close-stock-take
			do close-stock-take parameters are lp-control-code
			if exit-status > 0
				message-box 
					"The stock take did not close successfully.  Please discuss with the system administrator."
					title is ws-function-title
					message-buttons  MSG_BOX_OK
					icon MSG_BOX_INFORMATION
			endif
		endif
	end-confirm
end-screen

procedure create-xml-order
parameters
	lp-control-code						like stc-control-code
	lp-customer							like accountcode
	lp-filename							pic x(128) type string
local
	lf-doc								type xml-handle
	lf-root								type xml-handle
	lf-filename							pic x(1024) type string
	lf-lines							type xml-handle
	lf-line								type xml-handle
	lf-counter							type number
	lf-error-counter					type number
	lf-local-filename					pic x(128) type string
	//
	// Validate parameters
	//
	get stock-take-control
		on index stc-control-code
		key is lp-control-code
	on error
		exit 1
	endon
	get deb-master
		on index accountcode
		key is lp-customer
	on error
		exit 1
	endon
	//
	// Process stock-take
	//
	// Establish XML doc
	//
	set lf-doc = xml-new-document(spaces,"order")
	set lf-root = xml-get-root-node(lf-doc)
	if lf-root = 0
		message-box param-text("<<P1>><<BR>><<p2>>"
			,"Unable to access root node."
			,"No xml file created")
			title is ws-function-title
			message-buttons MSG_BOX_CANCEL
			icon MSG_BOX_STOP
		exit 1
	endif
	if xml-add-child-node-text(lf-root,"Customer",spaces,lp-customer) endif
	if xml-add-child-node-text(lf-root,"Whse",spaces,stc-whse-from) endif
	if xml-add-child-node-text(lf-root,"Date",spaces,format-picture(stc-freeze-date,"yyyymmdd")) endif
	if xml-add-child-node-text(lf-root,"Code",spaces,stc-control-code) endif
	set lf-lines = xml-add-child-node(lf-root,"lines",spaces) 
	if lf-lines = 0
		message-box param-text("<<P1>><<BR>><<p2>>"
			,"There was a problem adding the lines node to the xml file"
			,"No output file was created")
			title is ws-function-title
			message-buttons MSG_BOX_CANCEL
			icon MSG_BOX_STOP
		exit 1
	endif
	select *
		from stock-take-variance
		where stv-control-code = :lp-control-code
		and (stv-whse-qty - stv-count-qty) != 0
		order by stock-code
		database-sql
	detail
		set lf-counter += 1
		set lf-line =  xml-add-child-node(lf-lines,"line",spaces)
		if lf-line = 0
			set lf-error-counter += 1
		else
			if xml-add-child-node-text(lf-line,"stock_code",spaces,stock-code) endif
			if xml-add-child-node-text(lf-line,"qty",spaces,str(stv-whse-qty - stv-count-qty)) endif
			if xml-free-node-handle(lf-line) endif
		endif
	end-select
	//
	// report any errors.  Don't save the file if there are any errors.
	//
	if lf-error-counter > 0
		message-box param-text("<<P1>><<BR>><<p2>>"
			,concat("There were " str(lf-error-counter) " error(s) during the file build")
			,"No Output file was created")
			title is ws-function-title
			message-buttons MSG_BOX_CANCEL
			icon MSG_BOX_STOP
		exit 1
	endif
	//
	// save
	//
	if not xml-save-as-file(lf-doc,lp-filename,spaces,2)
		message-box param-text("<<P1>><<BR>><<p2>>"
			,"File failed to save"
			,error-description(file-status))
			title is ws-function-title
			message-buttons MSG_BOX_CANCEL
			icon MSG_BOX_STOP
	else
		message-box param-text("<<P1>><<BR>><<p2>><<BR>><<p3>>"
			,lf-filename
			,"Successfully Created"
			,concat(str(lf-counter), " lines added")
			)
			title is ws-function-title
			message-buttons MSG_BOX_OK
			icon MSG_BOX_INFORMATION
	endif
	if file-exists(lp-filename,false)
		if get-system-metrics(7) =  2
			set lf-local-filename = client-file-browse(spaces,spaces,"XML Files|*.xml","XML Save File",2)
			if pattern(lf-local-filename,"?*.xml$") = 0
				string lf-local-filename appending ".xml"
			endif
			// open the file
			command "proclientft"
				parameters
					"-cq"
					lp-filename
					lf-local-filename
		endif
	endif
end-procedure

procedure create-stdcsv-order
parameters
	lp-control-code						like stc-control-code
	lp-customer							like accountcode
	lp-filename							pic x(128) type string
	lp-post-to-pronto					type boolean
local
	lf-first-time						type boolean
	lf-qty								type number
	//
	open std-sales-order-and-lines create permanent
		file is lp-filename
	on error
		message-box param-text("<<P1>><<BR>>File: <<p2>><<BR>>Error:<<p3>>"
			,"Unable to open file for output."
			,lp-filename
			,error-description(file-status())
			)
			title is ws-function-title
			message-buttons  MSG_BOX_CANCEL
			icon MSG_BOX_STOP
		exit 1
	endon
	get deb-master
		on index accountcode
		key is lp-customer
	on error ENOREC
		message-box param-text("Invalid Customer Code<<BR>>Customer Code :<<p1>>"
			,lp-customer)
			title is ws-function-title
			message-buttons  MSG_BOX_CANCEL
			icon MSG_BOX_STOP
		exit 1
	endon
	select 
		t0.stock-code
		t1.stk-description
		lf-qty = stv-whse-qty - stv-count-qty
		from stock-take-variance as t0
		left join stock-master as t1 on t0.stock-code = t1.stock-code
		where stv-control-code = :lp-control-code
		and (stv-whse-qty - stv-count-qty) != 0
		order by t0.stock-code
	before
		set lf-first-time = TRUE
	detail
		initialise std-sales-order-and-lines
		if lf-first-time
			set std-record-type = "H"
			set std-so-cust-code = accountcode
			set std-so-whse-code = warehouse // from deb-master
			set std-so-cust-reference = str-concat("Consigned Stock:" stv-control-code)
			set std-so-order-date = format-picture(today(),"YYMMDDD")
			set std-so-rep-code = rep-code
			set std-so-delivery-date = format-picture(today(),"YYMMDDD")
			//
			set lf-first-time = FALSE
		else
			set std-record-type = "L"
		endif
		// Now add the line details
		set std-stock-code = stock-code
		set std-sol-ordered-qty = str(lf-qty)
		//
		insert std-sales-order-and-lines
	end-select
	if lp-post-to-pronto
		spl 'so/m50loadso' parameters
			'-std'
			lp-filename
			NO
	endif
end-procedure

screen view-order
parameters 	
	lp-control-code						like stc-control-code
local
	lf-qty								like stk-trans-qty
	window
	datagrid occurs 22
	select 
		t0.stock-code
		t1.stk-description
		lf-qty = stv-whse-qty - stv-count-qty
		from stock-take-variance as t0
		left join stock-master as t1 on t0.stock-code = t1.stock-code
		where stv-control-code = :lp-control-code
		and (stv-whse-qty - stv-count-qty) != 0
		order by t0.stock-code
	allowed search
detail
	accept stock-code @1,1
		title "Stock Code"
		when screenmode = search
		show-value
	display stk-description @1,2
		title "Description"
	display lf-qty @1,3
		title "Qty"
end-screen


procedure close-stock-take
parameters
	lp-control							like stv-control-code
local
	lf-commit							type boolean
	//
	set lf-commit = TRUE
	transaction begin
	get stock-take-control
		on index stc-control-code
		key is lp-control
		lock
	on error
		set lf-commit = FALSE
	else
		set stc-status = "U"
		update stock-take-control
		on error
			set lf-commit = FALSE
		endon
	endon
	select * from stock-take-variance
		where stv-control-code = :lp-control
		for update
	detail
		delete stock-take-variance
		on error
			set lf-commit = FALSE
		endon
	end-select
	if lf-commit 
		transaction commit
	else
		transaction rollback
		exit 1
	endif
end-procedure
