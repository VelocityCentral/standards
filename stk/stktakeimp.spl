////////////////////////////////////////////////////////////////////////////////
// Auto Generated Import Program for : stock-take-variance
//=========================================================================//
// Copyright (C) Velocity Global Ltd 2021
//
// PRONTO is a registered trademark of PRONTO Software P/L.
//
// All Rights Reserved. Unauthorized copying is prohibited.
//=========================================================================//
//
// Modification History
// Date		Who	SDR		What
////////////////////////////////////////////////////////////////////////////////

#include "../include/i8secabt.spl"
#include "../include/bmsdef.spl"
#include "../include/i8proglog.spl"
#include "../include/i8gparam.spl"
#include "../include/iprogbar.spl"

#define STATUSCOLOUR \
	colour if-then-else(mi-mistatus = "E", red, \
		if-then-else(mi-mistatus = "V", green, black))

#define MAXWRITESBEFORECOMMIT 10000
#define MINSECS 5

link 'import/clibvimport'
link 'clib/clibvfile'

#if BMS_DICT_VER > 730
#include "../include/i8govtbl.spl"		//#defines of governance defined fields	
link "clib/clibgov"						//determine size of governance defined fields	
link "clib/vlibstock"
#endif

mode md-select
	prompt "Select"

field
	ws-function-title					type string
	ws-object-name						type string
	ws-data-validated					type boolean
//	ws-stock-take-control				like stc-control-code

object mem-input
	type is memory
	record is
		mi-miseq						type number
		mi-mistatus						pic x // spaces - entered, V)alidate E)rror
		mi-mimessage					pic x(128) type string
		mi-whse-code					like whse-code
		mi-stv-bin-location				like stv-bin-location
		mi-stock-code					like stock-code
		mi-stv-count-qty				like stv-count-qty
		mi-stv-lot-batch-no				like stv-lot-batch-no
//		mi-stv-sort-location			like stv-sort-location
		mi-stv-control-code				like stv-control-code
	end-record
	key is mi-miseq

object csv-input
	type is external
	separator is ','
	record is
		csv-whse-code					like whse-code
		csv-stv-bin-location			like stv-bin-location
		csv-stock-code					like stock-code
		csv-stv-count-qty				like stv-count-qty
		csv-stv-lot-batch-no			like stv-lot-batch-no
//		csv-stv-sort-location			like stv-sort-location
		csv-stv-control-code			like stv-control-code
	end-record

mode md-validate
	prompt "Validate"
mode md-post
	prompt "Post"

procedure main
local
	lf-csvfile							pic x(1024) type string
	lf-start-row						type number
	get system-control first
	on error
		abort "No Control Record"
	endon
	do i8secabt-check-abort
		parameters are sys-consolidation-division login-id() "ZNZ" "T001"
		returning ws-function-title
	set ws-object-name = 'stock-take-variance'
	set ws-data-validated = TRUE
    // Override the title
	set ws-function-title = concat("Import for " ws-object-name)
	do i8proglog-write-log
#if BMS_DICT_VER > 7300
	do clibgov-get-governance-table
		parameter
			I8GOVTBL_STOCK_CODE
		returning
			i8govtbl-stock-code-size
	do vlibstock-check-governance
		parameter
			I8GOVTBL_STOCK_CODE
			I8GOVTBL_SWITCH_ON_GOVERNANCE_CHECK
	do vlibstock-check-governance
		parameter
			I8GOVTBL_STOCK_APN
			I8GOVTBL_SWITCH_ON_GOVERNANCE_CHECK
	do vlibstock-check-governance
		parameter
			I8GOVTBL_NAME_ADDRESS_LINE
			I8GOVTBL_SWITCH_ON_GOVERNANCE_CHECK
	do vlibstock-check-governance
		parameter
			I8GOVTBL_EMPLOYEE_ADDRESS
			I8GOVTBL_SWITCH_ON_GOVERNANCE_CHECK
	do vlibstock-check-governance
		parameter
			I8GOVTBL_SALES_ORDER_NUMBER
			I8GOVTBL_SWITCH_ON_GOVERNANCE_CHECK
	do vlibstock-check-governance
		parameter
			I8GOVTBL_CONSIGNMENT_NOTE
			I8GOVTBL_SWITCH_ON_GOVERNANCE_CHECK
#endif
	I8GPARAM_ALPHA("-csvfile",spaces,lf-csvfile)
	I8GPARAM_NUM("-csvstart",1,lf-start-row)
	if lf-csvfile != spaces
		do process-csv parameters are lf-csvfile lf-start-row
	else
//		do select-control 
		do import-data-prompt entry once
	endif
end-procedure

/*
screen select-control
	window
	datagrid occurs 22
	select *
		from stock-take-control
		where stc-status != "U"
		order by stc-freeze-date desc
	allowed search md-select
detail
	if screenmode  = md-select
		do import-data-prompt entry once
			parameters are stc-control-code
		exit
	endif
	accept stc-control-code @1,1
		title "Control"
	display stc-freeze-date @1,2
		title "Freeze Date"
	display stc-login-id @1,3
		title "User"
end-screen
*/

#if BMS_DICT_VER < 7600

screen import-data-prompt
//parameters
//	lp-control							like stc-control-code
local
	lf-method							pic x // D) Data grid  C)csv file
	lf-file-name						pic x(128) type string
	lf-path								pic x(128) type string
	lf-file								pic x(128) type string
	lf-record-count						type number
	lf-truncate-file					type boolean
	lf-start-row						type number
	lf-batch							type boolean
	lf-batch-queue						type number
	window @1,1 to @14,70
		window-position 5
	Title 'Import for stock-take-variance. Created 06-OCT-2021'
	no-prompt-for-search
	no-ok-cancel
	form-entry
before
	set lf-batch-queue = num(BMSDEF_BATCH_QUEUE(sys-reporting-que-from))
detail
	box @1,1 to @2,68
		title "Method"
	box @3,1 to @9,68
		title "CSV File"
	radio-button lf-method
		@1.7,10 "D" title  "Datagrid"
		@1.7,20 "C" title  "CSV file"
		default lf-method
		before-radio-button
			if screenmode = form-entry-defaults
				set lf-method = "D"
			endif
		end-before-radio-button
		validations
			//
		end-validations
		on change
			//
		end-on
	end-radio-button
	accept lf-file-name @4,10 pic x(40)
		title "CSV File"
		when lf-method = "C"
		no-warning
	on help-key
		do clibvfile-chooser
			parameters "?*csv" "/tmp"
			returning lf-file lf-path
		set lf-file-name = str-concat(lf-path,"/" lf-file)
		re-enter optional
	endon
	validations
		if not file-exists(lf-file-name,FALSE)
			message-box param-text("<<P1>><<BR>><<p2>>"
				,"This file cannot be found on tthe server."
				,lf-file-name)
				title is ws-function-title
				message-buttons  MSG_BOX_CANCEL
				icon MSG_BOX_STOP
			re-enter lf-file-name
		endif
	end-validations
	accept lf-start-row @6,10 pic z(8)
		title "Start Row"
		when lf-method = "C"
		default lf-start-row
		help "For example: if the CSV file has a single header record then this should be set to 2"
		no-warning
	before-accept
		if screenmode = form-entry-defaults
			set lf-start-row = 1
		else
			if lf-start-row = 0
				set lf-start-row = 1
			endif
		endif
	end-before-accept
	validations
		if lf-start-row < 1
			message-box
				"The start value must be an integer greater than zero"
				title is ws-function-title
				message-buttons  MSG_BOX_CANCEL
				icon MSG_BOX_STOP
			re-enter lf-start-row
		endif
	end-validations
	check-box lf-batch @8,5
		values True False
		title "Submit to Batch"
		default is FALSE
		help "Select this box to submit the job to the batch queue"
		when lf-method = "C"
		before-check-box
			if screenmode = form-entry-defaults
				set lf-batch = FALSE
			endif
		end-before-check-box
	end-check-box
	accept lf-batch-queue @8,30 pic z9
		title "Batch queue"  // The title is optional
		help "Enter a Valid Batch queue"
		default lf-batch-queue
		when lf-batch
		no-warning
	validations
		if lf-batch-queue < num(BMSDEF_BATCH_QUEUE(sys-reporting-que-from))
		or lf-batch-queue > num(BMSDEF_BATCH_QUEUE(sys-reporting-que-to))
			message-box param-text("The reporting queue must be between <<P1>> and <<p2>>"
				,num(BMSDEF_BATCH_QUEUE(sys-reporting-que-from))
				,num(BMSDEF_BATCH_QUEUE(sys-reporting-que-to)))
				title is ws-function-title
				message-buttons  MSG_BOX_CANCEL
				icon MSG_BOX_STOP
			re-enter lf-batch-queue
		endif
	end-validations
	display if-then-else(ws-data-validated
			," "
			,"WARNING:  THERE IS NO DATA VALIDATION ON THIS IMPORT") @11,10
		foreground prompts
		colour RED
		bold
	display "Warning: This program adds extra records to the stock take count file" @12,10
		foreground prompts
		colour RED
	display "You may need custom reporting for stock take variance reporting" @13,10
		foreground prompts
		colour RED
	confirm auto
	confirmed
		if lf-truncate-file
		endif
		if lf-method = "D"
			do process-datagrid
		else
			if lf-batch
				command 'probatch' parameters
					'-q' 's' '-b' lf-batch-queue
					get-param(0)
					'-csvstart' lf-start-row
					'-csvfile' lf-file-name
				message-box param-text("<<P1>><<BR>><<p2>>"
					,"This job has been submitted to the batch queue"
					,"You will receive an email when complete")
					title is ws-function-title
					message-buttons  MSG_BOX_OK
					icon MSG_BOX_INFORMATION
			else
				do process-csv parameters are lf-file-name lf-start-row
					returning lf-record-count
				message-box param-text("<<P1>> records processed to<<BR>><<p2>>"
					,lf-record-count
					,ws-object-name)
					title is ws-function-title
					message-buttons  MSG_BOX_OK
					icon MSG_BOX_INFORMATION
			endif
		endif
	end-confirm
end-screen

#else

// Ginger screen

screen import-data-prompt
local
	lf-method							pic x // D) Data grid  C)csv file
	lf-file-name						pic x(128) type string
	lf-path								pic x(128) type string
	lf-file								pic x(128) type string
	lf-record-count						type number
	lf-truncate-file					type boolean
	lf-start-row						type number
	lf-batch							type boolean
	lf-batch-queue						type number
	window
		window-position 5
	Title 'Import for stock-take-variance. Created 06-OCT-2021'
	no-prompt-for-search
	no-ok-cancel
	responsive
before
	set lf-batch-queue = num(BMSDEF_BATCH_QUEUE(sys-reporting-que-from))
detail
	screen-group // ---- Method ----------------------------
		field-group // ---- Group Title ----------------------------
			title "Import Method"
		    horizontal
			radio-button lf-method
				"D" title  "Datagrid"
				"C" title  "CSV file"
				default lf-method
				before-radio-button
					if screenmode = form-entry-defaults
						set lf-method = "D"
					endif
				end-before-radio-button
			on change
				refresh whens
			endon
			end-radio-button
		end-field-group // ---- Group Title --------------------------------------
	end-screen-group // ---- Method --------------------------------------
	screen-group // ---- csv file ----------------------------
		when lf-method = "C"
		next row
		accept lf-file-name pic x(40)
			title "CSV File"
			no-warning
		on help-key
			do clibvfile-chooser
				parameters "?*csv" "/tmp"
				returning lf-file lf-path
			set lf-file-name = str-concat(lf-path,"/" lf-file)
			re-enter optional
		endon
		validations
			if not file-exists(lf-file-name,FALSE)
				message-box param-text("<<P1>><<BR>><<p2>>"
					,"This file cannot be found on tthe server."
					,lf-file-name)
					title is ws-function-title
					message-buttons  MSG_BOX_CANCEL
					icon MSG_BOX_STOP
				re-enter lf-file-name
			endif
		end-validations
		accept lf-start-row pic z(9)
			title "Start Row"
			default lf-start-row
			help "For example: if the CSV file has a single header record then this should be set to 2"
		before-accept
			if screenmode = form-entry-defaults
				set lf-start-row = 1
			else
				if lf-start-row = 0
					set lf-start-row = 1
				endif
			endif
		end-before-accept
		validations
			if lf-start-row < 1
				message-box
					"The start value must be an integer greater than zero"
					title is ws-function-title
					message-buttons  MSG_BOX_CANCEL
					icon MSG_BOX_STOP
				re-enter lf-start-row
			endif
		end-validations
		check-box lf-batch
			values True False
			title "Submit to Batch Queue"
			default is lf-batch
			help "Select this box to submit the job to the batch queue"
			before-check-box
				if screenmode = form-entry-defaults
					set lf-batch = False
				endif
			end-before-check-box
			on change
				refresh whens
			endon
		end-check-box
	end-screen-group // ---- csv file --------------------------------------
	screen-group // ---- batch queue ----------------------------
		next row
		when lf-batch
		accept lf-batch-queue pic z9
			title "Batch queue"  // The title is optional
			help "Enter a Valid Batch queue"
			default lf-batch-queue
		validations
			if lf-batch-queue < num(BMSDEF_BATCH_QUEUE(sys-reporting-que-from))
			or lf-batch-queue > num(BMSDEF_BATCH_QUEUE(sys-reporting-que-to))
				message-box param-text("The reporting queue must be between <<P1>> and <<p2>>"
					,num(BMSDEF_BATCH_QUEUE(sys-reporting-que-from))
					,num(BMSDEF_BATCH_QUEUE(sys-reporting-que-to)))
					title is ws-function-title
					message-buttons  MSG_BOX_CANCEL
					icon MSG_BOX_STOP
				re-enter lf-batch-queue
			endif
		end-validations
	end-screen-group // ---- batch queue --------------------------------------
	screen-group // ---- Warning ----------------------------
		when not ws-data-validated
		next row
		display "WARNING:  THERE IS NO DATA VALIDATION ON THIS IMPORT"
			foreground prompts
			colour RED
			bold
		end-screen-group // ---- Warning --------------------------------------
	confirm auto
	confirmed
		if lf-truncate-file
		endif
		if lf-method = "D"
			do process-datagrid
		else
			if lf-batch
				command 'probatch' parameters
					'-q' 's' '-b' lf-batch-queue
					get-param(0)
					'-csvstart' lf-start-row
					'-csvfile' lf-file-name
				message-box param-text("<<P1>><<BR>><<p2>>"
					,"This job has been submitted to the batch queue"
					,"You will receive an email when complete")
					title is ws-function-title
					message-buttons  MSG_BOX_OK
					icon MSG_BOX_INFORMATION
			else
				do process-csv parameters are lf-file-name lf-start-row
					returning lf-record-count
				message-box param-text("<<P1>> records added to<<BR>><<p2>>"
					,lf-record-count
					,ws-object-name)
					title is ws-function-title
					message-buttons  MSG_BOX_OK
					icon MSG_BOX_INFORMATION
			endif
		endif
	end-confirm
end-screen

#endif

screen process-datagrid
local
	lf-seq							like mi-miseq
	window
	datagrid occurs 22
	title ws-function-title
	select * from mem-input
	allowed search entry remove correct  md-validate md-post
before
	close mem-input and remove
	open mem-input temporary
	set lf-seq = 1
detail
	if screenmode = entry
		set mi-miseq = lf-seq
	endif
	if screenmode = md-validate
		do validate-datagrid
	endif
	if screenmode = md-post
		do post-datagrid
	end-if
	accept mi-miseq @1,1 pic z(8)
		title "Sequence"
		when screenmode = search
		show-value
		STATUSCOLOUR
	accept mi-whse-code                      @1,2
		optional
		uppercase
		help 'warehouse code'
		STATUSCOLOUR
	accept mi-stv-bin-location               @1,3
		optional
		uppercase
		help 'stv-bin-location'
		STATUSCOLOUR
	accept mi-stock-code                     @1,4
		optional
		uppercase
		help 'Stock code'
		STATUSCOLOUR
	accept mi-stv-count-qty                  @1,5
		optional
		help 'count qty'
		STATUSCOLOUR
	accept mi-stv-lot-batch-no               @1,6
		optional
		uppercase
		help 'stv-lot-batch-no'
		STATUSCOLOUR
//	accept mi-stv-sort-location              @1,7
//		optional
//		help 'Sort key based on location - height seq.'
//		STATUSCOLOUR
	accept mi-stv-control-code               @1,8
		optional
		uppercase
		help 'stv-control-code'
		STATUSCOLOUR
	display mi-mimessage @1,256 pic x(60)
		title "Message"
		STATUSCOLOUR
	confirm auto
	before
		set mi-miseq = lf-seq
	confirmed
		if screenmode = entry
			set lf-seq += 1
		endif
	endconfirm
end-screen

procedure validate-datagrid
	window @1,1 to @5,40
		window-position 5
		title "Validating Data"
local
	lf-count							type number
	select * from mem-input
		for update
	detail
		set lf-count += 1
		if time-elapsed(100,MINSECS)
			display concat(str(lf-count), " records processed") @1,4
			do iprogbar-progress-bar parameters false,3,5,MINSECS
		endif
		initialise stock-take-variance
		set whse-code = mi-whse-code
		set stv-bin-location = mi-stv-bin-location
		set stock-code = mi-stock-code
		set stv-count-qty = mi-stv-count-qty
		set stv-lot-batch-no = mi-stv-lot-batch-no
//		set stv-sort-location = mi-stv-sort-location
		set stv-control-code = mi-stv-control-code
		do clibvimport-default-stock-take-variance
			parameters stock-take-variance.*
			returning stock-take-variance.*
		do clibvimport-validate-stock-take-variance
			parameters stock-take-variance.*
			returning mi-mistatus,mi-mimessage
		if mi-mistatus != "E"
			set mi-mistatus = "V"
		endif
		update mem-input
	end-select
end-procedure

procedure post-datagrid
	window @1,1 to @5,40
		window-position 5
		title "Updating Data"
local
	lf-record-count						type number
	lf-commit							type boolean
	lf-count							type number
	set lf-commit = TRUE
	transaction begin
	select * from mem-input
		where mi-mistatus = "V"
		for update
	detail
		set lf-count += 1
		if lf-count % MAXWRITESBEFORECOMMIT = 0
			transaction commit
			transaction begin
		endif
		if time-elapsed(100,MINSECS)
			display concat(str(lf-count), " records processed") @1,4
			do iprogbar-progress-bar parameters false,3,5,MINSECS
		endif
		/*
		get stock-take-variance
			 on index
			 key is
			lock
		on error ENOREC
		*/
			initialise stock-take-variance
			set whse-code = mi-whse-code
			set stv-bin-location = mi-stv-bin-location
			set stock-code = mi-stock-code
			set stv-count-qty = mi-stv-count-qty
			set stv-lot-batch-no = mi-stv-lot-batch-no
//			set stv-sort-location = mi-stv-sort-location
			set stv-control-code = mi-stv-control-code
			set stv-count-date = today()
			set stv-count-date-time = gmt()
			do clibvimport-default-stock-take-variance
				parameters stock-take-variance.*
				returning stock-take-variance.*
			insert stock-take-variance
			on error
				set mi-mistatus = "E"
				set mi-mimessage = error-description(file-status)
				update mem-input
			else
				set lf-record-count += 1
				delete mem-input
				on error
				endon
			endon
		/*
		else
			set whse-code = mi-whse-code
			set stv-bin-location = mi-stv-bin-location
			set stock-code = mi-stock-code
			set stv-count-qty = mi-stv-count-qty
			set stv-lot-batch-no = mi-stv-lot-batch-no
			set stv-sort-location = mi-stv-sort-location
			set stv-control-code = mi-stv-control-code
			do clibvimport-default-stock-take-variance
				parameters stock-take-variance.*
				returning stock-take-variance.*
			update stock-take-variance
			on error
				set mi-mistatus = "E"
				set mi-mimessage = error-description(file-status)
				update mem-input
			else
				set lf-record-count += 1
				delete mem-input
				on error
				endon
			endon
		endon
		*/
	end-select
	if transaction-active
		transaction commit
	endif
	message-box param-text("<<P1>> records processed to<<BR>><<p2>>"
		,lf-record-count
		,ws-object-name)
		title is ws-function-title
		message-buttons  MSG_BOX_OK
		icon MSG_BOX_INFORMATION
end-procedure

procedure import-report-header
	print
		company-name
		"CSV Import:" col 50
		ws-object-name
		today() col 80
		tod() col 90
		"Page" col 100
		page-no
	skip
	print "Input Rec No"
		"Error Message" col 15
	print 132"-"
end-procedure


procedure process-csv
	window @1,1 to @5,40
		window-position 5
		title "Updating Data"
parameters
	lp-file-name						pic x(1024) type string
	lp-start-row						type number
returning
	lr-record-count						type number
local
	lf-seq								type number
	lf-status							pic x
	lf-message							pic x(60) type string
	lf-error-count						type number
	open csv-input
		file is lp-file-name
		read-only
	on error
		message-box param-text("<<P1>><<BR>><<p2>><<BR>><<P3>>"
			,"Unable to open CSV file"
			,lp-file-name
			,error-description(file-status()))
			title is ws-function-title
			message-buttons  MSG_BOX_CANCEL
			icon MSG_BOX_STOP
		exit 1
	endon
	report concat("CSV Import:" ws-object-name)
		no-message
		header import-report-header
	page
	transaction begin
	select * from csv-input
	detail
		set lf-seq += 1
		if lf-seq < lp-start-row
			continue
		endif
		if lf-seq % MAXWRITESBEFORECOMMIT = 0
			transaction commit
			transaction begin
		endif
		if time-elapsed(100,MINSECS) and not batched
			display concat(str(lf-seq), " records processed") @1,4
			do iprogbar-progress-bar parameters false,3,5,MINSECS
		endif
		/*
		get stock-take-variance
			 on index
			 key is
			lock
		on error ENOREC
		*/
			initialise stock-take-variance
			set whse-code = uppercase(csv-whse-code)
			set stv-bin-location = uppercase(csv-stv-bin-location)
			set stock-code = uppercase(csv-stock-code)
			set stv-count-qty = csv-stv-count-qty
			set stv-lot-batch-no = uppercase(csv-stv-lot-batch-no)
//			set stv-sort-location = csv-stv-sort-location
			set stv-control-code = uppercase(csv-stv-control-code)
			set stv-count-date = today()
			set stv-count-date-time = gmt()
			do clibvimport-default-stock-take-variance
				parameters stock-take-variance.*
				returning stock-take-variance.*
			do clibvimport-validate-stock-take-variance
				parameters stock-take-variance.*
				returning lf-status,lf-message
			if lf-status = 'E'
				print lf-seq pic z(9)
					lf-message col 15
				set lf-error-count += 1
			else
				insert stock-take-variance
				on error
					print lf-seq pic z(9)
						error-description(file-status) col 15
					set lf-error-count += 1
				else
					set lr-record-count += 1
				endon
			endif
		/*
		else
			set whse-code = csv-whse-code
			set stv-bin-location = csv-stv-bin-location
			set stock-code = csv-stock-code
			set stv-count-qty = csv-stv-count-qty
			set stv-lot-batch-no = csv-stv-lot-batch-no
			set stv-sort-location = csv-stv-sort-location
			set stv-control-code = csv-stv-control-code
			do clibvimport-default-stock-take-variance
				parameters stock-take-variance.*
				returning stock-take-variance.*
			do clibvimport-validate-stock-take-variance
				parameters stock-take-variance.*
			returning lf-status,lf-message
			if lf-status = 'E'
				print lf-seq pic z(9)
					lf-message col 15
				set lf-error-count += 1
			else
				update stock-take-variance
				on error
					print lf-seq pic z(9)
						error-description(file-status) col 15
					set lf-error-count += 1
				else
					set lr-record-count += 1
				endon
			endif
		endon
		*/
	end-select
	if transaction-active
		transaction commit
	endif
	if lf-error-count > 0
		message-box param-text("There were <<P1>> errors<<BR>><<p2>>"
			,lf-error-count
			,"Use F5 to review error report")
			title is ws-function-title
			message-buttons  MSG_BOX_CANCEL
			icon MSG_BOX_STOP
	endif
end-procedure

