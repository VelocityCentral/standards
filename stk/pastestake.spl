/*

This is the program that Sonja wrote for image holdings to paste
their stock take from a spreadsheet.

It has been updated to add the bin location but not thoroughly tested.
Please test before use.

*/
////////////////////////////////////////////////////////////////////////////////
// Program : Stock Take count loader 
//=========================================================================//
// Copyright (C) Velocity Global Ltd 2018
//
// PRONTO is a registered trademark of PRONTO Software P/L.
//
// All Rights Reserved. Unauthorized copying is prohibited.
//=========================================================================//
//
// File: stk/pastestake.spl
// Modification History
// Date		Who	Job		What
// 16Feb18  s_m 		written
///////////////////////////////////////////////////////////////////////////////
//
#include '../include/i8secabt.spl'
#include '../include/i85codes.spl'      // system table code maint
#include '../include/i8proglog.spl'
#include '../include/m4enqstk.spl'
//#define DO_NOT_PRINT_STOCK_TAKE_CONTROL_PARAMS			
#include "../stk/i4stktctrl.spl"	


link 'clib/clibusertable'

#define DG_FIELDS	99

#define UPDATE_RECORD(x) \
	set t-fld-in-error[x] = TRUE \
	set lr-valid = FALSE \
	insert tmp-error

#define COLOUR_FIELD(x) \
	COLOUR is BLACK on if-then-else(sumarray(t-fld-in-error,1,DG_FIELDS) = 0,WHITE, \
			if-then-else(t-fld-in-error[x],RED,YELLOW))


object tmp-object
	type is memory
	record is
		t-line-seq						type number pic 99
		t-stock-code					like stock-code
		t-whse-code						like whse-code
		t-stv-bin-location				like stv-bin-location
		t-stv-lot-batch-no				like stv-lot-batch-no
		t-stv-shelf-life				like stv-shelf-life-date
		t-stv-count-qty					like stv-count-qty
		t-fld-in-error					type boolean occurs DG_FIELDS
		t-line-error-count				type number pic 9
	endrecord
	key is t-line-seq

object tmp-error
	type is memory
	record is
		tmp-line-seq			like t-line-seq
		tmp-error-txt			type string pic x(300)
	endrecord
	key is tmp-line-seq

object tmp-duplicates
	type is memory
	record is
		t-dup-line-seq			like t-line-seq
		t-dup-stock-code		like stock-code
		t-dup-whse-code			like whse-code
		t-dup-batch-no			like stv-lot-batch-no
		t-dup-shelf-life		like stv-shelf-life-date
		t-dup-location			like stv-bin-location
		t-dup-count-qty			like stv-count-qty
	endrecord
	key is t-dup-stock-code t-dup-whse-code t-dup-batch-no t-dup-shelf-life t-dup-location

field
	ws-function-title			type string

procedure main
	get system-control first
	on error
		abort 'No Control Record'
	endon
	do i8secabt-check-abort
		parameters are sys-consolidation-division login-id() 'ZVG' 'M021'
		returning ws-function-title 
	do i8proglog-write-log
	do accept-validation-parameters
end-procedure

screen accept-validation-parameters
local
	lf-control-code					like stv-control-code
	lf-count-date					type date
	//
	allowed entry
	responsive
	title is ws-function-title
detail
	screen-group // ---- Parameters ----------------------------
		title "Parameters"  
		accept lf-control-code 
			title "Stocktake Control:"
			default lf-control-code
			help 'Enter the stocktake control code you wish to preload [HELP]'
			drop-down
				width 38
				concat-title
				select stc-control-code, concat("Freeze Date:", format-picture(stc-freeze-date,"ddmmmyy"))
					from stock-take-control 
					where stc-status = 'F'
				local-sql
			end-drop-down
		on change
			get stock-take-control
				on index stc-control-code
				key is lf-control-code
			on error
				// unlikley
			endon
			refresh whens
		endon
		accept lf-count-date 
			title 'Count date:'
			help 'Enter date of count'
			default today()
	end-screen-group // ---- Parameters --------------------------------------
	screen-group // ---- Stock Take Details ----------------------------
		title "Sock Take Details"  
		when lf-control-code != spaces
		display stc-cyclic-code 
			title "Stocktake Cyclic Code:"
		field-group // ---- Item code Range ----------------------------
			title "Item code Range"  
			display stc-stock-code-from pic x(25)
				title "From"
			display stc-stock-code-to pic x(25)
				title "To"
		end-field-group // ---- Item code Range --------------------------------------
		field-group // ---- Warehouse Range ----------------------------
			title "Warehouse Range"  
			display stc-whse-from 
				title "From"
			display stc-whse-to 
				title "To"
		end-field-group // ---- Warehouse Range --------------------------------------
		field-group // ---- ABC Range ----------------------------
			title "ABC Range"  
			display stc-class-from 
				title "From"
			display stc-class-to 
				title "To"
		end-field-group // ---- ABC Range --------------------------------------
		field-group // ---- Item Group Range ----------------------------
			title "Item Group Range"  
			display stc-group-from 
				title "From"
			display stc-group-to 
				title "To"
		end-field-group // ---- Item Group Range --------------------------------------
	end-screen-group // ---- ock Take Details --------------------------------------
	confirm auto
	confirmed
		open tmp-object temporary truncate
		do display-load-datagrid 
			initial-mode entry
			parameters lf-count-date
	endconfirm
endscreen

screen display-load-datagrid
parameter
	lp-count-date						type date
local
	lf-description						pic x(117)
	lf-seq								like t-line-seq
	lf-valid							type boolean
local mode 
	lm-validate
		prompt "Validate"
		help "Validate all data in grid, remove zero counts and combine duplicates"
		when t-stock-code <> spaces
		always-show
	lm-update
		prompt "Update"
		help "Validate, Load and Update all grid data into stocktake records"
		when t-stock-code <> spaces
		always-show
	//
	allowed search entry remove correct 
	primary tmp-object
	datagrid 
	responsive
	title ws-function-title
screen-section
	title "Errors"
//	section-when t-line-error-count != 0
	do display-errors no-wait
end-screen-section
before
	set lf-description = str-concat("Data will be lost if you exit without updating."
						"  Export data to Excel and reload if correction process is interrupted.")
	screen-group // ---- Warning ----------------------------
		title "Warning"  // The title is optional
		display lf-description 
	end-screen-group // ---- Warning --------------------------------------
	set lf-seq = 1
detail
	// need to 0 t-line-seq in paste mode to ensure it increments.
	if screenmode = entry
		set t-line-seq = lf-seq
	endif
	screen-group // ---- Datagrid ----------------------------
		title "Stock Take"  // The title is optional
		next row
		accept t-line-seq col 1 pic zzz9
			default t-line-seq
			title "Seq"
			optional
			when screenmode in (search)
			show-value
		accept t-whse-code  col 2 pic x(11)
			Title "Warehouse  "
			uppercase
			COLOUR_FIELD(1)
			optional
			when screenmode in (entry correct)
			show-value
		accept t-stock-code col 3 pic x(27)
			Title "Item Code  "
			uppercase
			COLOUR_FIELD(2)
			optional
			when screenmode in (entry correct)
			show-value
		accept t-stv-bin-location col 4
			title "Location"
			uppercase
			COLOUR_FIELD(3)
			optional
			when screenmode in (entry correct)
			show-value
		accept t-stv-lot-batch-no  col 5 pic x(16)
			Title "Batch  "
			uppercase
			left
			COLOUR_FIELD(4)
			optional
			when screenmode in (entry correct)
			show-value
		accept t-stv-shelf-life col 6 
			Title "Shelf life"
			COLOUR_FIELD(5)
			optional
			when screenmode in (entry correct)
			show-value
		accept t-stv-count-qty  col 7
			Title "Count Qty " 
			COLOUR_FIELD(6)
			optional
			when screenmode in (entry correct)
			show-value
		display t-line-error-count col 8 pic z(6)9
			Title "Errors "
		end-screen-group // ---- Datagrid --------------------------------------
	confirm 
		when screenmode = remove
		default is no
	before
		set t-line-seq = lf-seq
	confirmed
		set lf-seq += 1
		if screenmode = lm-validate
			do validate-record parameter lf-seq returning lf-valid
			refresh whens
		elseif screenmode = lm-update
			do validate-record parameter lf-seq returning lf-valid
			if lf-valid
				do update-data parameter lp-count-date returning lf-valid
			endif
		else
			set lf-valid = FALSE
		endif
	end-confirm
end-screen

screen display-errors
	allowed search
	select * from  tmp-error
		where t-line-seq = tmp-line-seq
	data-grid 
	responsive
	title "Line Errors"
before
	// make sure error file is present
	open tmp-error
	on error ENOENT
		open tmp-error temporary
	endon
detail
	screen-group // ---- Errors ----------------------------
		title "Errors"  // The title is optional
		accept tmp-error-txt @4,2
	end-screen-group // ---- rrors --------------------------------------
	confirm
	end-confirm
endscreen

procedure validate-record
parameter
	lp-seq								type number
returning
	lr-valid							type boolean
local
	lf-seq								type number
	lf-whse-type						pic 99
	//
	set lr-valid = TRUE
	open tmp-error temporary truncate
	open tmp-duplicates temporary truncate
	// check for duplicates
	initialise tmp-duplicates
	select *
		from tmp-object
		where t-stv-count-qty > ZERO
	//rjb - indenting
		detail
			get tmp-duplicates
				on index t-dup-stock-code t-dup-whse-code t-dup-batch-no t-dup-shelf-life t-dup-location
				key is t-stock-code t-whse-code t-stv-lot-batch-no t-stv-shelf-life t-stv-bin-location
			on error
				//insert first occurance of (stock code,whse,batch,shelflife)
				set t-dup-line-seq = t-line-seq
				set t-dup-stock-code = t-stock-code
				set t-dup-whse-code = t-whse-code
				set t-dup-batch-no = t-stv-lot-batch-no
				set t-dup-shelf-life = t-stv-shelf-life
				set t-dup-count-qty = t-stv-count-qty
				set t-dup-location = t-stv-bin-location
				insert tmp-duplicates
			else
				set t-dup-count-qty += t-stv-count-qty
				update tmp-duplicates
			endon
	endselect
	// clear tmp-object and rewrite accumulated totals
	// renumber lines
	open tmp-object temporary truncate
	set lf-seq = 0
	select *
		from tmp-duplicates
	detail
		set lf-seq += 1
		set t-line-seq = lf-seq 
		set t-stock-code = t-dup-stock-code
		set t-whse-code = t-dup-whse-code
		set t-stv-lot-batch-no = t-dup-batch-no
		set t-stv-shelf-life = t-dup-shelf-life
		set t-stv-count-qty = t-dup-count-qty
		set t-stv-bin-location = t-dup-location
		insert tmp-object
	endselect
	if lf-seq <> lp-seq
		message "Duplicate lines have been merged. Zero counts have been removed."
	endif
	//
	select *
		from tmp-object
	detail
		initialise tmp-error
		set t-fld-in-error[*] = FALSE
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is "WH" t-whse-code
		on error
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Warehouse not valid")
			UPDATE_RECORD(1)
		end-on
		set lf-whse-type = sys-tbl-sales-mtd
		if t-whse-code < stc-whse-from or t-whse-code > stc-whse-to
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Stock Item: ", str-concat(t-stock-code)," not within whse range")
			UPDATE_RECORD(1)
		end
		get stock-master
			on index stock-code
			key is t-stock-code
		on error
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Stock Item: ",str-concat(t-stock-code)," not found")
			UPDATE_RECORD(2)
		endon
		get stock-warehouse-detail
			on index stock-code whse-code
			key is t-stock-code t-whse-code
		on error
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Stock Warehouse Detail: ",str-concat(t-stock-code," ",t-whse-code)," not found")
			UPDATE_RECORD(1)
			UPDATE_RECORD(2)
		endon
		if stk-stock-status = "X"
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Superceded item or Cross referenced item: ", str-concat(t-stock-code)," can't be stock counted")
			UPDATE_RECORD(2)
		endif
		if stk-stock-status in {"X" "K" "L" "Z"}
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Non item code: ", str-concat(t-stock-code)," can't be stock counted")
			UPDATE_RECORD(2)
		endif
		if t-stock-code < stc-stock-code-from or t-stock-code > stc-stock-code-to
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Stock Item: ", str-concat(t-stock-code)," not within stock item range")
			UPDATE_RECORD(2)
		endif
		if stk-abc-class < stc-class-from or stk-abc-class > stc-class-to
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Stock Item: ", str-concat(t-stock-code)," not within stock class range")
			UPDATE_RECORD(2)
		endif
		if stock-group < stc-group-from or stock-group > stc-group-to
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Stock Item: ", str-concat(t-stock-code)," not within stock group range")
			UPDATE_RECORD(2)
		endif
		// locations
		if lf-whse-type = 2 and t-stv-bin-location = spaces
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = "Bin Locations must be specified for this warehouse"
			UPDATE_RECORD(3)
		endif
		if lf-whse-type = 3 
			get warehouse-valid-locations
				on index whse-code sl-location-code
				key is t-whse-code t-stv-bin-location
			on error ENOREC
				set tmp-line-seq = t-line-seq
				set tmp-error-txt = "Bin Locations must be valid (pre-defined) for this warehouse"
				UPDATE_RECORD(3)
			endon
		endif
		if stk-serialized-flag = "L" and t-stv-lot-batch-no = spaces
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Lot tracked item MUST have lot number entered")
			UPDATE_RECORD(4)
		endif
		if stk-serialized-flag != "L" and t-stv-lot-batch-no != spaces
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Lot code entred for item that is not lot controlled")
			UPDATE_RECORD(4)
		endif
		if stk-shelf-life-days <> ZERO and stk-serialized-flag = "L"
			if t-stv-shelf-life = ZERO
				set tmp-line-seq = t-line-seq
				set tmp-error-txt = concat("Lot tracked items MUST have shelf life date entered")
				UPDATE_RECORD(5)
			endif
		endif
		if t-stv-shelf-life <> ZERO
			if t-stv-shelf-life not between DATE-TO-JULIAN("01-Jan-2005") and DATE-TO-JULIAN("31-Dec-2050")
				set tmp-line-seq = t-line-seq
				set tmp-error-txt = concat("Shelf life must be between 01-Jan-2005 and 31-Dec-2050")
				UPDATE_RECORD(5)
			endif
		endif
		if t-stv-count-qty < ZERO
			set tmp-line-seq = t-line-seq
			set tmp-error-txt = concat("Counted quantity CANNOT be negative")
			UPDATE_RECORD(6)
		endif
		if sum-array(t-fld-in-error,1,DG_FIELDS) > ZERO
			set t-line-error-count = sum-array(t-fld-in-error,1,DG_FIELDS) 
		endif
		update tmp-object
	endselect
	if NOT lr-valid
		message "Issues have been found, please correct and try again."
	endif 
endprocedure

procedure update-data
returning
	lr-valid						type boolean
local 
	lf-freeze-whse-cost				like whse-avg-cost
	lf-exists						type boolean
parameter
	lp-count-date					type date
	//
	transaction begin
	set lr-valid = TRUE
	select *
		from tmp-object
	detail
		get stock-warehouse-detail
			on index stock-code whse-code
			key is t-stock-code t-whse-code
		on error
			message "Error - Could not find Stock Warehouse Details"
			set lr-valid = FALSE
		endon
		set lf-freeze-whse-cost = whse-avg-cost
		set lf-exists = FALSE
		select * from stock-take-variance
			where whse-code = t-whse-code
				and stock-code = t-stock-code
				and stv-lot-batch-no = t-stv-lot-batch-no
				and stv-bin-location = t-stv-bin-location
				for update
		detail
			set lf-exists = TRUE
			set stv-count-qty += t-stv-count-qty
			set stv-count-date = lp-count-date
			set stv-shelf-life-date = t-stv-shelf-life
			update stock-take-variance
			on error
				message "Error - Could not update Stock Take Variance"
				set lr-valid = FALSE
			endon
		endselect
		if lf-exists = FALSE
			initialise stock-take-variance
			set stv-control-code = stc-control-code
			set stv-freeze-date = stc-freeze-date
			set stv-freeze-date-time = date-time(stc-freeze-date,0,gmt)
			set stock-code = t-stock-code
			set whse-code = t-whse-code
			set stv-bin-location = t-stv-bin-location
			set stv-freeze-whse-cost = lf-freeze-whse-cost
			set stv-lot-batch-no = t-stv-lot-batch-no
			set stv-shelf-life-date = t-stv-shelf-life
			set stv-count-date = lp-count-date
			set stv-count-qty = t-stv-count-qty
			insert stock-take-variance 
			on error
				message "Could not insert Stock Take Variance"
				set lr-valid = FALSE
			endon
		endif
	endselect
	if lr-valid
		message-box 'This will insert and update all records into Stock take. Are you sure you want to Continue?'
			title is 'Warning'
			message-buttons MSG_BOX_OK_CANCEL
			default is MSG_BOX_CANCEL
			icon MSG_BOX_WARNING
			bell
		if message-status = MSG_BOX_OK
			transaction commit
			select *
				from tmp-object
				for update
			detail
				delete tmp-object
			end-select
			message "All Records Inserted and Updated!"
		else
			message "Update abandoned!"
			transaction rollback
			set lr-valid = FALSE
		endif
	else
		message "Update issues have been found, please correct and try again!"
		transaction rollback
		set lr-valid = FALSE
	endif
endprocedure
