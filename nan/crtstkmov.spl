













Do not use.  Retired
















//////////////////////////////////////////////////////////////////////////////
//crtstkmov -Create Stock Movements from Budget
//=========================================================================//
// Copyright (C) Structured Data Systems Ltd 1987
//
// PRONTO is a registered trademark of Prometheus Software Developments P/L.
//
// All Rights Reserved. Unauthorised copying is prohibited.
//=========================================================================//
//
// Modification History
// Date		Who	SDR		What
// 17feb05	rmb			written
////////////////////////////////////////////////////////////////////////////////

#define NO_OF_SELECTION_PARAMETERS '0'
#define REPORT_NAME 'Create Stock Movements from Budget'

//#define DEBUG_MODE

#include '../include/bmsdef.spl'
#include '../include/rbtchproc.spl'
//#include 'c:\usr\pronto\cus\standards\apollo/iddexl.spl'


link "clib/clibstk"

field
	ws-start-stk-stock-status		pic x //like stk-stock-status but no dict validation!
	ws-end-stk-stock-status			pic x 
	ws-include-serial-tracked		pic x
	ws-percent-variance				pic 9.9999
	ws-percent-above				pic 9.9999
	ws-months						type number pic 99
	ws-high-disc-rep				like rep-code
	ws-low-qty-rep					like rep-code
	ws-high-disc-cust				like accountcode
	ws-low-qty-cust					like accountcode
	ws-high-disc-stock				like stock-code
	ws-low-qty-stock				like stock-code
	ws-no-flat-months				pic 99
	ws-flat-months-start				pic 99

#if BMS_DICT_VER >= 7501 

procedure main
	message "Program retired.  Now use configstkmov"
endprocedure

#endif

#if BMS_DICT_VER < 7501 

procedure main
	get system-control first
	set ws-report-started = FALSE
	disable-all-triggers
	RBTCHPROC_RUN_PROGRAM(REPORT_NAME)
endprocedure //main ------------------------------------------------------------


screen rbtchproc-report-parameters
local x type number
	allow entry
before
	clear
	DO_SCREEN_HEADER()
	display	REPORT_NAME @3,29 inverse
	box @4,1 to @22,80
	box @18,1 to @22,80
detail
	accept ws-start-stk-stock-status @5,25
		uppercase
		default spaces
		prompt is "Start Stock Type:"
	accept ws-end-stk-stock-status @6,25
		uppercase
		default ws-start-stk-stock-status
		fill with trailing "~"
		prompt is "End Stock Type:"
	accept ws-include-serial-tracked @7,25
		allow YES NO
		default YES
		uppercase
		prompt is "Include Serial Tracked:"
	accept ws-months @8,25
		prompt is "Number of Months:"
		help is "Number of months to create stock movements for"
		validation
			if ws-months <= 1
				message "Cannot be less than 1"
				reenter
			endif
		endvalidation
	accept ws-percent-variance @9,25
		prompt "Percent Variance"
		help "How much do you want the actual to vary from the budget value 0.2 = +/- 10%"
		default 0.2
	accept ws-percent-above @10,25
		prompt "Percent above"
		help "What percentage of that variance do you want above the budget value 0.75 - mean that 75% of the values will exceed budget"
		default 0.75
	accept ws-high-disc-rep @11,25
		title "High Disc Rep:"
		help "Spaces- ignore otherwise rep code that is giving away too much discount"
		default "05"
	validations
		if ws-high-disc-rep <> spaces
			get rep-master 
				on index rep-code
				key is ws-high-disc-rep
			on error
				message "invalid"
				re-enter ws-high-disc-rep
			endon
		endif
	end-validations
	accept ws-low-qty-rep @11,55
		title "Low Qty Rep:"
		help "Spaces- ignore otherwise rep code that is not selling enough"
		default "03"
	validations
		if ws-low-qty-rep <> spaces
			get rep-master 
				on index rep-code
				key is ws-low-qty-rep
			on error
				message "invalid"
				re-enter ws-low-qty-rep
			endon
		endif
	end-validations
	accept ws-high-disc-cust @12,25
		title "High Disc cust:"
		help "Spaces- ignore otherwise cust code that is giving away too much discount"
		default "C0003"
	validations
		if ws-high-disc-cust <> spaces
			get deb-master 
				on index accountcode
				key is ws-high-disc-cust
			on error
				message "invalid"
				re-enter ws-high-disc-cust
			endon
		endif
	end-validations
	accept ws-low-qty-cust @12,55
		title "Low Qty cust:"
		help "Spaces- ignore otherwise cust code that is not selling enough"
		default "C0002"
	validations
		if ws-low-qty-cust <> spaces
			get deb-master 
				on index accountcode
				key is ws-low-qty-cust
			on error
				message "invalid"
				re-enter ws-low-qty-cust
			endon
		endif
	end-validations
	accept ws-high-disc-stock @13,25
		title "High Disc stock:"
		help "Spaces- ignore otherwise stock code that is giving away too much discount"
		default "BU200"
	validations
		if ws-high-disc-stock <> spaces
			get stock-master 
				on index stock-code
				key is ws-high-disc-stock
			on error
				message "invalid"
				re-enter ws-high-disc-stock
			endon
		endif
	end-validations
	accept ws-low-qty-stock @13,55
		title "Low Qty stock:"
		help "Spaces- ignore otherwise stock code that is not selling enough"
		default "BU220"
	validations
		if ws-low-qty-stock <> spaces
			get stock-master 
				on index stock-code
				key is ws-low-qty-stock
			on error
				message "invalid"
				re-enter ws-low-qty-stock
			endon
		endif
	end-validations
	accept ws-no-flat-months @14,25
		title "Flat months:"
		help "Number of depressed months"
		default 2
	accept ws-flat-months-start @14,55
		title "Flat Months START"
		help "No of months ago flat months STARTED"
		default 5
	confirm auto
	confirmed
		RBTCHPROC_EXECUTION
	endconfirm
endscreen //rbtchproc-report-parameters --------------------------------------

procedure rbtchproc-set-parameters
endprocedure //rbtchproc-set-parameters --------------------------------------

procedure start-report
	set rbtchproc-report-name = REPORT_NAME
	report rbtchproc-report-name		
		header is skeleton-report-header
		no-message
//		full-xml
	set ws-report-started = TRUE
	if rbtchproc-in-background
		RBTCHPROC_MESSAGE_REPORT_STARTED
	else
		display 'Report :' @20,59 background right bold
		display spool-file-name() @20,68 pic x(12) foreground prompts
	endif
endprocedure //start-report ----------------------------------------------------

procedure skeleton-report-header
	if report-is-xml()
		report section "headings_section"
	endif
	print company-name col 1
		rbtchproc-report-name col 51 bold
		"Date:" col 85
		tod() col 110
		today() col 91
		"Time:" col 104
		'Page:' col 120
		left-justify(str(page-no)) col 126 pic x(4)
	skip
	if report-is-xml()
		report section finished
	endif
endprocedure //skeleton-report-header ------------------------------------------

// Your main processing routine must be named as follows
procedure rbtchproc-report-detail
local
	x						type number
	l-trend					type number
	l-amount-diff			type number
	l-back-trend			type number
	l-qty					type number
	l-initial-qty			type number
	l-random				type number
	l-start-date			type date
	l-date					type date
	i						type number
	l-invoice				type number
	l-sol-line-seq			like sol-line-seq
	l-so-order-reason-code	like so-order-reason-code
	l-so-rep-code			like so-rep-code
	l-so-territory-code		like so-territory
	l-record-counter		type number
	l-flat-period-start		type date
	l-flat-period-end		type date
	l-rounding				pic 99v9(5)
	l-offset				type number
	window @19,44 to @24,80
	    title is "Report Progress"
	    color white
	    no-hide
	if not rbtchproc-in-background
		display bitmap concat(getenv('BMS')'/images/repedge.gif') @19,44
		display spool-file-name() @20,68 pic x(12) foreground prompts
		display "Now at :" @23,45 background prompts left
	endif
	//
	if ws-no-flat-months <> 0
		set l-flat-period-start = addmonths(today(), 0 - ws-flat-months-start,TRUE)
		set l-flat-period-start = julian(1,month(l-flat-period-start),year(l-flat-period-start))
		set l-flat-period-end = addmonths(l-flat-period-start,ws-no-flat-months,true) - 1
	end
	//
	// PIC clauses are set in the print statement to enable
	// later use of the pronto report layout tool
	//
	set x = 0 // to avoid warning error
//	do build-file
	do start-report
	page
	skip
	print "Flat period " l-flat-period-start " to " l-flat-period-end
	print " Low value sales for:" 
	if ws-high-disc-rep <> spaces
		print "Rep" ws-high-disc-rep
	endif
	if ws-high-disc-cust <> spaces
		print "cust" ws-high-disc-cust
	endif
	if ws-high-disc-stock <> spaces
		print "stock" ws-high-disc-stock
	endif
	print " Low qty sales for:" 
	if ws-low-qty-rep <> spaces
		print "Rep" ws-low-qty-rep
	endif
	if ws-low-qty-cust <> spaces
		print "cust" ws-low-qty-cust
	endif
	if ws-low-qty-stock <> spaces
		print "stock" ws-low-qty-stock
	endif
	// put the hard bits here
	// as of about dimensions, PRONTO checks the sales-order-archive when
	// setting abcs so you need to create a dummy record with 0 salesordernum
	get sales-order-archive
		on index so-order-no so-bo-suffix
		key is 0 spaces
	on error
		initialise sales-order-archive
		set so-order-no = 0
		insert sales-order-archive
		on error
		endon
	endon
	set l-invoice = 10000
	select *
		from deb-sales-history-budget-2
		order by accountcode dsh-stock-key deb-budget-status 
	detail
		if not rbtchproc-in-background
			display accountcode @23,54 foreground prompts
		endif
		//check whether we want stock movements for this item
		get stock-master
			on index stock-code
			key is dsh-stock-key
		on error
			print "No stock movements inserted for deb " accountcode " item "  dsh-stock-key
				" error: could not get stock-master"
			continue
		else
			//check item type
			if stk-stock-status not between ws-start-stk-stock-status and ws-end-stk-stock-status
				continue
			endif
			//ignore if serialised item and we have chosen to exclude serialised items
			if ws-include-serial-tracked = NO
				if stk-serialized-flag != "N"
					continue
				endif
			endif
			//ignore kit parents because stock movements are at child level
			if stk-stock-status = "K"
				continue
			endif
		endon
		get deb-master
			on index accountcode
			key is accountcode
		on error
			print "No stock movements inserted for deb " accountcode " item "  dsh-stock-key
				" error: could not get deb-master"
			continue
		endon
		//is the budget trend increasing or decreasing?
		get stock-aged-sales-budget
			on index stock-code ash-whse ash-budget-or-forecast ash-budget-type ash-budget-year
			key is stock-code spaces "Z" "0" 0
		on error
			print "No stock movements inserted for deb " accountcode " item " dsh-stock-key
				" error: could not get stock-aged-sales-budget record"
			continue
		else
			set l-trend = (ash-budget-qty[12] - ash-budget-qty[1]) / 11
			//is it significant? 
			//not if change is < 100/year across all customers for that product
			if l-trend between -10 and +10 
				set l-trend = 0
			endif
		endon
		//how much (qty not percentage) is the change per month?
		if l-trend != 0
			set l-amount-diff = (deb-sales-hist-budget-qty[12] - deb-sales-hist-budget-qty[1]) / 11
			set l-amount-diff = abs(l-amount-diff)
		else 
			set l-amount-diff = 0
		endif
		set l-back-trend = -1 * l-trend
		//apply that quantity difference back desired number of months
		set l-start-date = date-to-julian(concat("01-",str(sys-stk-per),"-",str(sys-stk-yr)))
		print "Start Date is " l-start-date " stock-code " stock-code
		set l-date = l-start-date
		set l-initial-qty = deb-sales-hist-budget-qty[sys-stk-per]
		set l-offset = sys-stk-per
		if l-initial-qty = 0	
			set l-initial-qty = 0.01
		endif
		set l-qty = l-initial-qty
		for i = 1 to ws-months
			//---- rj
			set l-initial-qty = deb-sales-hist-budget-qty[l-offset]
			if l-initial-qty = 0	
				set l-initial-qty = 0.01
			endif
			set l-qty = l-initial-qty
			set l-offset -= 1
			if l-offset <= 0
				set l-offset = 12
			endif
			// ----
			set l-date = add-month(l-date,-1,0)
			get system-control-time-dimension
				on index sctd-type sctd-date
				key is spaces l-date
			on error
				initialise system-control-time-dimension
				leaving sctd-date
			endon
			initialise stock-movements
				leaving stock-code
			set stk-trans-type = "SO"
			set stk-trans-whse =  warehouse
			set stk-trans-date = l-date
			// random number to determine where in the month
			do get-random parameters are 0 1 returning l-random
			set stk-trans-date = julian(
				integer(days-in-month(month(l-date),year(l-date)) * l-random),
				month(l-date),
				year(l-date))
			set stk-accountcode = accountcode
			set stk-batch-ref = spaces
			set stk-batch-trans-no = l-record-counter
			set stk-trans-ref1 = spaces
			set stk-trans-ref2 = spaces
			set stk-trans-ref3 = spaces
			// build ref2
			set l-sol-line-seq = 1
			set l-so-order-reason-code = spaces
			set l-so-rep-code = spaces
			set l-so-rep-code = rep-code
			set l-so-territory-code = spaces
			set l-so-territory-code = territory
			set stk-trans-ref2 = fstr((l-sol-line-seq * 100),6,0)
			set stk-trans-ref2 =
				concat(substring(stk-trans-ref2,1,9),
				l-so-order-reason-code)
			set stk-trans-ref2 =
				concat(substring(stk-trans-ref2,1,11),
				l-so-rep-code
				l-so-territory-code)
			//
			set stk-trans-rep-code = l-so-rep-code
			set stk-trans-territory = l-so-territory-code
			set stk-trans-financial-year = sctd-year
			set stk-trans-financial-period = sctd-period
			set stk-trans-date-time = date-time(l-date,0,0)
			set stk-document-no = spaces
			set stk-document-suffix = spaces
			set stk-document-seq = 0
			set stk-trans-analysis-code1 = spaces
			set stk-trans-analysis-code2 = spaces
			set stk-trans-created-by = uid()
			do get-random parameters are (1 - ws-percent-variance) 1 returning l-random		
			set l-random += (ws-percent-variance * ws-percent-above) 
			if l-back-trend < 0
				set l-qty = (l-qty - l-amount-diff) * l-random
			elseif l-back-trend > 0
				set l-qty = (l-qty + l-amount-diff) * l-random
			elseif l-back-trend = 0
				set l-qty = l-initial-qty * l-random
			endif
			set l-qty = integer(l-qty)
#ifdef DEBUG_MODE
			set stk-document-seq = l-random
			set stk-trans-ref2 = str(l-amount-diff)	
			if l-trend > 0
				set stk-trans-ref1 = "up"
			elseif l-trend < 0
				set stk-trans-ref1 = "down"
			elseif l-trend = 0
				set stk-trans-ref1 = "no change"
			endif
#endif
			set l-invoice += 1
			set stk-trans-ref1 = str(l-invoice)
			if l-qty < 0
				set l-qty = 0
			endif
			if l-back-trend < 0 and l-qty = 0
				break
			endif
//
// now make a bunch of adjustments to qty
			// determine start and end date of flat months
			if ws-no-flat-months <> 0
				if l-date between l-flat-period-start and l-flat-period-end
					set l-qty = l-qty - (l-qty * 0.3)
				endif
			endif
			if ws-low-qty-rep = l-so-rep-code
				set l-qty = l-qty - (l-qty * 0.2)
			endif
			if ws-low-qty-cust = stk-accountcode
				set l-qty = l-qty - (l-qty * 0.2)
			endif
			if ws-low-qty-stock = stock-code
				set l-qty = l-qty - (l-qty * 0.2)
			endif
			if l-qty < 0
				set l-qty = 0
			endif
//
			do clibstk-item-rounding
				parameters are stk-unit-desc
				returning l-rounding
			set l-qty = round(l-qty,l-rounding)
			set stk-trans-qty = 0 - l-qty
			if stk-trans-qty != 0
				do get-random parameters are (1 - ws-percent-variance) 1 returning l-random		
				set l-random += (ws-percent-variance * ws-percent-above) 
				set stk-trans-value = 0 - ((deb-sales-hist-budget-price[1] * l-random) * stk-trans-qty)
				set stk-trans-cost = stk-std-cost 
				if stk-trans-cost = 0
					select * from stock-supplier
						where stock-code = :stock-code
					detail
						break
					end-select
					set stk-trans-cost =  sup-last-buy-price
				endif
				set stk-trans-cost *= (0 - stk-trans-qty)
//
// now make a bunch of adjustments to value
				if ws-high-disc-rep = l-so-rep-code
					set stk-trans-value = stk-trans-value - (stk-trans-value * 0.2)
				endif
				if ws-high-disc-cust = stk-accountcode
					set stk-trans-value = stk-trans-value - (stk-trans-value * 0.2)
				endif
				if ws-high-disc-stock = stock-code
					set stk-trans-value = stk-trans-value - (stk-trans-value * 0.2)
				endif
//
				set l-record-counter += 1
				insert stock-movements
				on error
					print "Could not insert stock movement for deb " accountcode 
						" item " dsh-stock-key
						" error: " error-description(file-status())
				else
					print stock-code stk-accountcode stk-trans-date l-random stk-trans-qty stk-trans-value
				endon
			endif
		endfor
	endselect
	do finish-report
endprocedure //rbtchproc-report-detail ---------------------------------------

procedure get-random
parameters are 
	l-start							type number
	l-end							type number
returning
	l-value							type number
	if l-start < 0 
		set l-start = 0
	endif
	if l-end > 1
		set l-end = 1
	endif
	repeat
		// random returns a number between 0 and 32767
		set l-value = random(0)
		// ensure the number is even spread between 0.0001 and +1
		// 1. drop and amount > 10,000 ( to ensure we deal with an even range)
		if l-value > 10000
			set l-value = l-value - (integer(l-value / 10000) * 10000) + 1
		endif
		// now have a number between 0 and 9999
		// divide by 10000 to get numbers between 0 and 0.9999
		set l-value = l-value / 10000
	until l-value between l-start and l-end
	end-repeat
end-procedure //get-random


/*
procedure build-file //--------------------------------------------------------
local
	x type number
	set x = 0 // dummy variable for potential use.
	open temp-file temporary create
	select * from deb-sales-history-budget-2
	detail
		insert temp-file
			on error
			endon
		if not rbtchproc-in-background
			display "Building File" @20,59 background left bold
			display  @23,54 foreground prompts
		endif
	end-select
	if ws-excel-flag = YES
		do excel-export
	endif
	if ws-excel-flag = "D"
		do display-datagrid
	endif
end-procedure //---------------------------------------------------------------
*/

procedure finish-report
	if report-is-xml()
		page
		report section "options_page"
	endif
	if ws-report-started
		skip 2
		print 'Options selected : ' col 2 no-newline
			tag  'options_print'
		skip
		print "Start stock type: " in col 22 
			ws-start-stk-stock-status
		print "End stock type: " in col 22
			ws-end-stk-stock-status	
		print "Include serial tracked: " in col 22
			ws-include-serial-tracked
		print "Number of months: " in col 22
			ws-months
	endif
	if report-is-xml()
		report section finished
	endif
	RBTCHPROC_SCREEN_FINISH_MESSAGE(ws-report-started,23,45)
endprocedure //finish-report ---------------------------------------------------

/*
procedure excel-export
local
	l-row		type number
	l-col		type number
	l-last-row	type number
	l-last-col  type number
	XL_CREATE_NEW()
	set l-row = 3
	set l-last-col = 0
	set l-row += 1
	select * from temp-file
	detail
		set l-row += 1
		if not rbtchproc-in-background
			display "Writing Spreadsheet" @20,59 background left bold
			display t- @23,54 foreground prompts
		endif
	end-select
	set l-last-row = l-row
	XL_FORMAT_TEXT(3,1,3,l-last-col,"B")
	XL_WRAP_TEXT(3,1,3,l-last-col)
	XL_VERT_TEXT(3,1,3,l-last-col,1)
	XL_AUTO_FIT(1,1,l-last-row,l-last-col)
	XL_PUT(1,1,REPORT_NAME)
	XL_FORMAT_TEXT(1,1,1,1,"20")
	XL_FORMAT_TEXT(1,1,1,1,"U")
	XL_HORIZ_TEXT(1,1,1,l-last-col,7)
	XL_MAXIMISE()
end-procedure
*/

/*
screen display-datagrid
	window @1,1 to @24,80
	title REPORT_NAME
	datagrid occurs 22
	select * from temp-file
	allowed search
detail
end-screen
*/
#endif

