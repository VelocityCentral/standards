////////////////////////////////////////////////////////////////////////////////
// Program : Maintain the ipmi master file.
//=========================================================================//
// Copyright (C) Velocity Global Ltd 2011
//
// PRONTO is a registered trademark of PRONTO Software P/L.
//
// All Rights Reserved. Unauthorized copying is prohibited.
//=========================================================================//
//
// File: c:\usr\pronto\cus\standards\xiutils\ipmi\codemaint.spl
//
// Modification History
// Date		Who	SDR		What
// 21Apr11	rjb	Log 1	Installed
////////////////////////////////////////////////////////////////////////////////
 
#include "../include/i8secabt.spl" 
#include "../include/i8proglog.spl" 
 
field 
	ws-function-title					type string

mode md-detail
	prompt "Detail"
mode md-readings
	prompt "Readin&gs"
mode md-remove
	prompt "Remove"
	process remove
mode md-change-code
	prompt "C&hange Code"
	help "change the code used to identify this type"
mode md-reset-trigger
	prompt "Reset &Trigger"
	help "Reset the trigger points accroding to the data values"

 
procedure main 
	get system-control first 
	on error
		abort "No Control Record"
	endon
	do i8secabt-check-abort
		parameters are sys-consolidation-division login-id() "ZVG" "M001"
		returning ws-function-title 
	do i8proglog-write-log
	do ipmi-dg
end-procedure

screen ipmi-dg
	window
	datagrid occurs 22
	allowed entry search correct remove md-detail md-readings md-change-code
		md-reset-trigger
	select * from ipmi-master
detail
	if screenmode = md-detail
		do ipmi-maint parameters are ipmi-code
	end-if
	if screenmode = md-readings
		do ipmi-display-readings parameters are ipmi-code
	end-if
	if screenmode = md-change-code
		do change-code entry once parameters are ipmi-code
		refresh
	endif
	if screenmode = md-reset-trigger
		do reset-trigger entry once parameters are ipmi-code
		refresh
	endif
	accept ipmi-code @1,1
		uppercase
		when screenmode <> correct
		show-value
	accept ipmi-description @1,2
	accept ipmi-match-text @1,3
	accept ipmi-reading-type @1,4
	accept ipmi-reading-field @1,5
	accept ipmi-boolean-tf @1,6
		optional
	accept ipmi-reading-boolean-match @1,7
		optional
	accept ipmi-trigger-low @1,8
		optional
	accept ipmi-trigger-high @1,9
		optional
	accept ipmi-days-to-keep @1,10
		optional
	confirm
		prompt "Ok to remove and delete readings"
		when screenmode = md-remove
	before
		if screenmode = md-remove
#if PRONTO_RELEASE < 71
			select * from ipmi-readings
				where ipmi-code = :ipmi-code
				for update
			detail
				delete ipmi-readings
				on error
				endon
			end-select
#else
		sql-delete ipmi-readings
			where ipmi-code = :ipmi-code
#endif
		endif
	end-confirm
end-screen

screen change-code
parameters
	lp-code						like ipmi-code
local
	lf-new-code					like ipmi-code
	lf-ok						type boolean
	window @1,1 to @5,70
	title "Change a code"
detail
	display  lp-code @2,30
		title "Old Code"
	accept lf-new-code @3,30
		title "New Code"
		uppercase
	validations
		get ipmi-master
			on index ipmi-code
			key is lf-new-code
		on error
		else
			message "This code is already in use"
			re-enter
		endon
	end-validations
	confirm
	confirmed
		transaction begin
		set lf-ok = TRUE
		select 
			*
			from ipmi-readings 
			where ipmi-code = :lp-code
			for update
		detail
			set ipmi-code = lf-new-code
			update ipmi-readings
			on error
				set lf-ok = FALSE
			endon
		end-select
		get ipmi-master 
			on index ipmi-code
			key is lp-code
			lock
		on error
			set lf-ok = false
		else
			set ipmi-code = lf-new-code
			update ipmi-master
			on error
				set lf-ok = FALSE
			endon
		endon
		if lf-ok
			transaction commit
		else
			message-box "An error occured - all updates rolled back"
				title is ws-function-title
				message-buttons MSG_BOX_CANCEL
				icon MSG_BOX_STOP
			transaction rollback
		endif
	end-confirm
end-screen

screen ipmi-display-readings
parameters
	lp-code						like ipmi-code
	window
	datagrid occurs 22
	title ws-function-title
	select * from ipmi-readings where ipmi-code = :lp-code
detail
	accept ipmi-datetime @1,1
		when screenmode = search
		show-value

	display ipmi-reading-value @1,2
	display ipmi-reading-unit @1,3
end-screen


screen ipmi-maint
parameters
	lp-code						like ipmi-code
	window
	title ws-function-title
	select * from ipmi-master
		where ipmi-code = :lp-code
	form-entry
detail
	if screenmode = form-entry-defaults
		set ipmi-reading-type = "N"
	endif
	accept ipmi-code @2,30
		title "Code:"
	accept ipmi-description @3,30
		title "Description:"
	accept ipmi-match-text @4,30
		title "Match text:"
	box @5,10 to @7,70
		title "Reading Type"
	radio-button ipmi-reading-type
		@6,30 "N" title  "Numeric"
		@6,40 "B" title  "Boolean"
		right-coordinate
		default ipmi-reading-type
		before-radio-button
			//
		end-before-radio-button
		validations
			//
		end-validations
		on change
			//
		end-on
	end-radio-button 
	accept ipmi-reading-field @8,30
		title "Field Number:"
		default 4
	box @9,10 to @11,70
		title "Value to return for boolean match"
	radio-button ipmi-boolean-tf
		@10,30 "T" title "True"
		@10,40 "F" title "False"
		right-coordinate
		default ipmi-boolean-tf
		before-radio-button
			//
		end-before-radio-button
		validations
			//
		end-validations
		on change
			//
		end-on
	end-radio-button 
	accept ipmi-reading-boolean-match @12,30
		title "Text To Match:"
	// cannot use when in form entry
	validations
		if ipmi-reading-type = "B" and ipmi-reading-boolean-match = spaces
			message "You cannot have a blank entry for a boolean field type"
			re-enter
		elseif ipmi-reading-type = "N" and ipmi-reading-boolean-match != spaces
			message "You cannot have an entry for a non boolean field type"
			re-enter
		endif
	end-validations
	accept ipmi-trigger-low @13,30
		title "Low Trigger Boundary:"
	accept ipmi-trigger-high @14,30
		title "High Trigger Boundary:"
	accept ipmi-days-to-keep @15,30
		title "Days to keep readings:"
end-screen

screen reset-trigger
parameters
	lp-ipmi-code							like ipmi-code
local
	lf-high-value							like ipmi-reading-value
	lf-low-value							like ipmi-reading-value
	lf-low-percent							type number
	lf-high-percent							type number
	window @1,1 to @10,50
		relative to @10,10
	title "Reset Trigger Value"
	form-entry
before
	select lf-high-value = max(ipmi-reading-value)
			lf-low-value = min(ipmi-reading-value)
		from ipmi-readings
		where ipmi-code = :lp-ipmi-code
	end-select
	display "This option will reset the high and low watermarks for this reading " @1,2
		colour blue
	display "based on the highest and lowest values currently recorded" @2,2
		colour blue
	display concat("The lowest reading value is " str(lf-low-value) " " ) @4,5
	display concat("The highest reading value is " str(lf-high-value)) @5,5
	set lf-low-percent = 30
	set lf-high-percent = 30
detail
	accept lf-low-percent @7,20 pic zzz.99
		title "Percent BELOW lowest"
		help "30 means 30 percent below the minimum value for the field"
		default lf-low-percent
	on change
		display concat("resulting in " str(lf-low-value * ( 1 - (lf-low-percent / 100)))) @7,30 foreground prompts
	end-on
	accept lf-high-percent @8,20 pic zzz.99
		title "Percent ABOVE Highest"
		help "30 means 30 percent above the maximum value for the field"
		default lf-low-percent
	on change
		if lf-high-percent = 100
			display concat("resulting in " str(max-value(lf-high-value))) @8,30 foreground prompts
		else
		display concat("resulting in " str(lf-high-value * ( 1 + (lf-high-percent / 100)))) @8,30 foreground prompts
		endif
	end-on
	confirm
	confirmed
		get ipmi-master
			on index ipmi-code
			key is lp-ipmi-code
			lock
		on error
		else
			set ipmi-trigger-low = lf-low-value * ( 1 - (lf-low-percent / 100))
			if lf-high-percent = 100
				set ipmi-trigger-high = max-value(ipmi-trigger-high)
			else
			set ipmi-trigger-high = lf-high-value * ( 1 + (lf-high-percent / 100))
			endif
			update ipmi-master
			on error
			endon
		endon
	end-confirm
end-screen
